OR: "or"
AND: "and"
NOT: "not"

EQ: "=="
NE: "!="
LT: "<"
LE: "<="
GT: ">"
GE: ">="

OR_: "|"
XOR: "^"
AND_: "&"
LSHIFT: "<<"
RSHIFT: ">>"
INVERT: "~"

POS: "+"
NEG: "-"
ADD: "+"
SUB: "-"
MUL: "*"
FLOORDIV: "/"
MOD: "%"
POW: "**"

TRUE: "true"
FALSE: "false"

HEX_DIGIT: /[0-9a-f]/i
DEC_DIGIT: /[0-9]/
OCT_DIGIT: /[0-7]/
BIN_DIGIT: /[01]/

expression: logical_or

logical_or: [logical_or OR] logical_and
logical_and: [logical_and AND] logical_not
logical_not: NOT logical_not | comparison

comparison: [comparison compop] bitwise_or

bitwise_or: [bitwise_or OR_] bitwise_xor
bitwise_xor: [bitwise_xor XOR] bitwise_and
bitwise_and: [bitwise_and AND_] bitwise_shift
bitwise_shift: bitwise_neg [shiftop bitwise_neg]
bitwise_neg: INVERT bitwise_neg | arith_sign

arith_sign: signop arith_sign | arith_term
arith_term: [arith_term termop] arith_fact
arith_fact: [arith_fact factop] arith_power
arith_power: [arith_power POW] value

compop: EQ | NE | LT | LE | GT | GE
shiftop: LSHIFT | RSHIFT
signop: POS | NEG
termop: ADD | SUB
factop: MUL | FLOORDIV | MOD

value: parenthesis | atomic_value
parenthesis: "(" expression ")"
atomic_value: number | boolean

number: hex_number | dec_number | oct_number | bin_number
hex_number: "x"i HEX_DIGIT+
dec_number: DEC_DIGIT+
oct_number: "o"i OCT_DIGIT+
bin_number: "b"i BIN_DIGIT+

boolean: TRUE | FALSE

%ignore " "
